#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
/* note - for windows this is different */
#include <sys/mman.h> 

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"

// DynASM directives.
|.arch x64
|.actionlist actions

void dump(char * file, char * mem, size_t s) {
     FILE * f = fopen(file, "w");
     fwrite(mem, sizeof(char), s, f);
     fclose(f);
}

int main(int argc, char **argv) {
    dasm_State * state;
    size_t codesize;
    char * memory;
    void * globals[10];
    int (*fp)(int, int);
    int i;
    /* initialize the assembler structure */
    dasm_init(&state, 1);
    dasm_setupglobal(&state, globals, 10);
    dasm_setup(&state, actions);

    /* add some instructions */
    #define Dst &state
    | push rbp;
    | mov rbp, rsp;
    | lea rcx, [>1];
    | jmp rcx;
    | mov rax, 1337;
    | jmp >2;
    |1:
    | mov rax, 42;
    |2:
    | pop rbp;
    | ret;
    #undef Dst
    /* link the code and get its' final size */
    dasm_link(&state, &codesize);
    /* get r/w memory */
    memory = mmap(NULL, codesize, PROT_READ | PROT_WRITE,
                  MAP_ANON | MAP_PRIVATE, -1, 0);
    /* write the machine code */
    dasm_encode(&state, memory);
    dump("example.dump", memory, codesize);
    /* clear up the assembler */
    dasm_free(&state);
    /* make the memory executable */
    mprotect(memory, codesize, PROT_EXEC | PROT_READ);
    /* cast to function */
    fp = (int(*)(int, int)) memory;
    /* call the function */
    printf("hello %d, %d, %d\n", fp(1, 3), fp(1, 2), fp(0, 4));
    /* destroy the memory */
    munmap(memory, codesize);
    /* and leave */
    exit(0);
}
