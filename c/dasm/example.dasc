#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
/* note - for windows this is different */
#include <sys/mman.h>

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"

// DynASM directives.
|.arch x64
|.actionlist actions

void dump(char * file, char * mem, size_t s) {
     FILE * f = fopen(file, "w");
     fwrite(mem, sizeof(char), s, f);
     fclose(f);
}

int main(int argc, char **argv) {
    dasm_State * state;
    size_t codesize;
    char * memory;
    void * globals[10];
    int (*fp)(int, int);
    int a = 6, b = 12, c = 136, d = 0;
    int i = 9, j = 5, k = 1024;
    int error;
    /* initialize the assembler structure */
    dasm_init(&state, 1);
    dasm_setupglobal(&state, globals, 10);
    dasm_setup(&state, actions);

    /* add some instructions */
    #define Dst &state
    /* 3 different modes should all work */
    | add Rq(4), Rq(1);
    | add [Rq(4)], Rq(1);
    | add [Rq(4)+1], Rq(1);
    | add [Rq(4)+1024], Rq(1);
    | add [Rq(12)], Rq(1);
    /* SIB encoding should also work */
    | add [Rq(4)+Rq(6)*8], Rq(7);
    | add [Rq(12)+Rq(5)*8], Rq(13);
    | add [Rq(4)+Rq(12)*4], Rq(9);
    /* NB - rsp as an index is unsupported */
    /* a few rbp tests */
    | add [Rq(5)+4], Rq(0);
    | add [Rq(5)], Rq(3);
    | add [Rq(5)+1024], Rq(7);
    | add [Rq(5)], Rq(5);
    | add Rq(5), Rq(1);
    /* offset is expected in SIB case, too */
    | add [Rq(5)+Rq(9)*2], Rq(3);
    | add [Rq(13)], rax;
    /* hardcoded should also still work */
    | add [rbp], rax;
    | add [rbp+4], rax;
    /* mixed operand sizes should work */
    | movzx r8, r8w;
    | movzx r8, Rw(8);
    | movzx Rq(9), word [Rq(10)];
    | movzx Rd(8), Rw(10);

    | movzx eax, r6b;
    | movzx Rd(0), Rb(6);
    | movzx Rd(0), Rw(6);

    |ret;
    #undef Dst
    /* link the code and get its' final size */
    dasm_link(&state, &codesize);
    /* get r/w memory */
    memory = mmap(NULL, codesize, PROT_READ | PROT_WRITE,
                  MAP_ANON | MAP_PRIVATE, -1, 0);
    /* write the machine code */
    error = dasm_encode(&state, memory);
    if (error != DASM_S_OK) {
        fprintf(stderr, "OH NO ENCODING FAILED :-(: error=0x%x\n", error);
        exit(1);
    }
    dump("example.dump", memory, codesize);
    /* clear up the assembler */
    dasm_free(&state);
    /* make the memory executable */
    mprotect(memory, codesize, PROT_EXEC | PROT_READ);
    /* cast to function */
    fp = (int(*)(int, int)) memory;
    /* call the function */
    printf("hello %d, %d, %d\n", fp(1, 3), fp(1, 2), fp(0, 4));
    /* destroy the memory */
    munmap(memory, codesize);
    /* and leave */
    exit(0);
}
